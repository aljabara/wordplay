-include "../words.sbl"
*	this is a study of distribution of the first few, and last few, letters in the dictionary words.
*	first, to decide whether to scan for possible moves from left to right, or from right to left.
*	also, to decide if it's worth looking at just first few characters of candidate words to see if
*	they rule out possibility word could be valid.

*	Net is that left to right or right to left about the same. 

*
*	note that running the program shows about 3100 such words, about the same for strings that end words
	init()
	dict.in = g.dict
	dict = sort(dict.in,1)
*	set dict.n to dictionary size
	p = prototype(dict)
	p break(',') . dict.n
	output = 'dictionary size ' dict.n
	possible = +n
	tab = char(9)
	n = +1
	max = +26
	exact = +0
	
	output = lpad('n',8)  lpad('26**n',24) lpad('#>=n',8) lpad('#==n',8)  lpad('first',8)  lpad('last',8)  
n.next
	gt(n = n + 1,5)						:s(n.done)
	i = 0
	first = table(1000)
	last = table(1000)
	count = 0
dict.next
	word = dict[i = i + 1,1]				:f(dict.done)
	lt(size(word),n)					:s(dict.next)
	count = count + 1
	exact = eq(size(word),n) exact + 1
	sub = substr(word,1,n)
	first[sub] = first[sub] + 1
	pre = substr(word,1,n)
	post = substr(word,size(word) - (n - 1),n)
	first[pre] = first[pre] + 1
	last[post] = last[post] + 1
								:(dict.next)
dict.done
	fara = convert(first,'array')
	fp = prototype(fara)
	fp break(',') . n.first
	lara = convert(last,'array')
	lp = prototype(lara)
	lp break(',') . n.last
*	update max
	max = max * max
	output = lpad(+n,8)  lpad(+max,24) lpad(+count,8) lpad(+exact,8) lpad(+n.first,8) lpad(+n.last,8)
								:(n.next)
n.done
end
