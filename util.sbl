

* Copyright (c) 2016 dave shields

*	Global Variables

*	Here are the global variables. Each has a name starting with 'g.' Their initial value is set in the
*	procedure *init()*.

*	g.dict, array(15), is an array of hashtables  that are non-null for words in the dictionary.

*	g.permutations, a table of the permutations of n=1..7 things taken 1..k at a time.
*	For example, g.perms['7?3'] is permutations of 1..7 taken 3 at a time, as a string with
*	entries separated by a space.

*	g.permutations.count, a table giving the number of permutations of for a given *n* and *k*.

*	g.rack, a string containing the current rack. Plays are made using the characters from the rack.

*	g.random_var is used by random() to compute the next pseudo-random value.
*	Gimpel uses integer here, but need to have real.

	g.random_var = 1


*	g.tiles, a string containing all the characters in the initial bag of characters.

*	g.trace, if not null, begin tracing at the start of move g.trace.

	g.trace =

*	g.tracing, set nonzero when tracing initiated by *g.trace* begins.


*	Utility functions

	define('init(dictfile,skip,external)c,i,j,s,t')		:(init.end)

*	Initialize global variables.

*INIT*
init

	init.main(dictfile,skip)

*	Free up code for initializers now that no longer needed.

	init.bonus = init.main = init.dict = init.tileset = init.value = 
			
							:(return)
init.end

	define('init.main(dictfile,skip)c,i,j,s,t')	:(init.main.end)

*	Initialize global variables.

init.main
	g.dict = array(15)

*	Initialze permutation map.

	init.perm('perm.txt')

	init.tileset()
	shuffle();* shuffle the tileset

	init.dict(dictfile,skip)
							:(return)
init.main.end


	define('init.dict(filename,skip)file,i,n,w,s')		:(init.dict.end)

*	Initialize the global dictionary g.dict.

*INIT.DICT*
init.dict

*	Set hash table sizes according to output of /study/gendict.sbl

	s  = '1 100 1000 4000 9000 15000 23000 28000 25000 20000 15000 11000 8000 5000 3000 '
init.dict.tbl
	gt(i = i + 1,15)				:s(init.dict.tbl.1)
	s break(' ') . n ' ' = 
	g.dict[i] = table(+n)				:(init.dict.tbl)
init.dict.tbl.1
	i = 0


*	Read in a dictionary from a specified file, with one word per line. If 'skip'
*	is non-zero then that number of lines are skipped before adding the next word.
*	This assists the use of smaller dictionaries for testing.

	filename = ident(filename) 'dict.txt'
	skip = (ident(skip) +1, +skip)

	input(.file,3,filename)				:s(init.dict.in)
	output = 'unable to open input file ' filename	:(freturn)
	n = 0
init.dict.in
	w = file					:f(init.dict.done)
	gt(size(w),15)					:s(init.dict.in)

*	Process plural words, indicated by 'S' at end

	differ(substr(w,size(w),1),'S')			:s(init.dict.w)
	w = substr(w,1,size(w) - 1)
	g.dict[size(w)][w] = +1
	g.dict[size(w) + 1][w 's'] = +1			:(init.dict.in)
init.dict.w
	g.dict[size(w)][w] = +1
	eq(skip,1)					:s(init.dict.in)
*	here want to skip over entries in the dictionary (for testing)
	n = skip
init.dict.skip
	w = file					:f(init.dict.done)
	gt(n = n - 1,0)					:s(init.dict.skip)f(init.dict.in)
init.dict.done
	endfile(3)					:(return)
init.dict.end

	define('init.perm(filename)line,ifile,n,k,lines,nread')	:(init.perm.end)

*	Initialize the list of possible permutations from a file.

*INIT.PERM*
init.perm
	g.permutations = table(7)
	g.permutations.count = table(100)
	input(.ifile,4, filename)			:s(init.perm.next)
	output = 'unable to open permutation file ' filename 	:(freturn)
init.perm.next
	line = ifile					:f(init.perm.done)
	line break('?') . n '?' break(' ') . k ' ' rem . count :f(init.perm.err)
	g.permutations.count[n '?' k] = count
	ara = array(count)
	ai = 0
init.perm.array
	ara[ai = ai + 1] = ifile			:s(init.perm.array)
	g.permutations[n '?' k] = ara			:(init.perm.next)
init.perm.done
	endfile(4)					:(return)
init.perm.err
	output = 'init.perm error, line ' lines '  '  line :(freturn)
init.perm.end

	define('init.tileset()ch,n,s')			:(init.tileset.end)

* 	Initialize set of tiles, ignoring the 'blank' tiles for now.

*INIT.TILESET*
init.tileset
	s = 'a 9 b 2 c 2 d 5 e 13 f 2 g 3 h 4 i 8 j 1 k 1 l 4 m 2 n 5 o 8 p 2 q 1 r 6 s 5 t 7 u 4 v 2 w 2 x 1 y 2 z 1 '
	g.tiles =
init.tileset.ch
	s break(' ') . ch ' ' break(' ') . n ' ' =	:f(return)
	g.tiles = g.tiles dupl(ch,n)			:(init.tileset.ch)
init.tileset.end


	define('append(str,w,ch)')				:(append.end)

*	Append word *w* to string *str*, prefixing with *ch* if *str* is not null, using space if *ch* is null.

*APPEND*
append
*	ident(w)	:s(append.fail)
	ch = ident(ch) ' '
	append = ident(str) w				:s(return)
	append = str ch w				:(return)
append.fail
	 output = 'null ch to append ' w :(end)
append.end

	define('checkline(line)iline,word')			:(checkline.end)

*	Succeeds if all the words in the line are in the dictionary, fails otherwise.

*CHECKLINE*
checkline
	count.checkline = count.checkline + 1
	line span(' ') =
	empty(line)					:s(return)
	iline = line
	line = line ' ';* to simplify breaking out words.
checkline.1
	line span(' ') =
	ident(iline)					:s(checkline.done)
	line break(' ')  . word ' ' =			:f(checkline.done);* if line exhausted
	eq(size(word),1)				:s(checkline.1)
	checkword(word)					:f(checkline.failed)s(checkline.1)

	output = ne(g.tracing) 'checkline VALID<' iline '>'  :(checkline.1)

	checkword(word)					:s(checkline.1)

checkline.failed
*	output = ne(g.tracing) 'checkline INVALID<' iline '>' 
							:(freturn)
checkline.done
*	output = ne(g.tracing) 'checkline VALID ' iline
							:(return)
checkline.end

	define('checkword(w)')				:(checkword.end)

*	Succeeds if w is in the global dictionary, fails otherwise.

*CHECKWORD*0
checkword
	eq(size(w),1)					:s(return)
	count.checkword = count.checkword + 1
	differ(g.dict[size(w)][w])			:f(freturn)s(return)
*	differ(g.dict[size(w)][w])			:f(freturn)s(checkword.good)
checkword.bad
	output = 'invalid blank at start of checkword ' w :(end)
checkword.good
*	output =  'checkword VALID ' w			
							:(return)
checkword.end


	define('counter(text,count)')			:(counter.end)

*	Output the descriptive text *text* and value *n* of a counter.

*COUNTER*
counter
	output = lpad(text,32) lpad(count,10)		:(return)
counter.end

	define('counters()')				:(counters.end)

*	Output the collected counter metrics.

*COUNTERS*
counters
	output = 
	output = 'Performance metrics:'
	counter('placements found by scan'	, count.scanned	)
	counter('permutations examined'		, count.perm	)
	counter('cells examined'		, count.cells	)
	counter('potential moves found'		, count.moves 	)
	counter('lines checked'			, count.checkline)
	counter('words checked'			, count.checkword)
	counter('clines lines checked'		, count.cline	)
	counter('cross lines checked'		, count.cross	)
	counter('valid moves found'		, count.valid	)
	counter('inserts'			, count.insert)
	counter('contig inserts'		, count.insert.contig)
	counter('split inserts'			, count.insert.split)
							:(return)
counters.end

	define('empty(line)')				:(empty.end)

*	Test if line is empty (null or all blanks).

empty	
	line span(' ') =
	ident(line)					:s(return)f(freturn)
empty.end
	

	define('getrack(p,move)')			:(getrack.end)

*	Return rack for player *p* after making move.

*GETRACK*
getrack
*	Update rack.

	rack(p) = less(rack(p), lcase(text(move))) take(size(text(move))) 
*	Here if can't take any new tiles, so fail for now.

*	Shuffle the tiles so the tile set changes according to the tiles played.
* Not for now, maintain repeatability
*	shuffle()
*	output = 'shuffled'
							:(return)
getrack.end

	define('lcase(s)')				:(lcase.end)

*	Convert argument to lower case.

*LCASE*
lcase
	lcase = replace(s,&ucase,&lcase)		:(return)
lcase.end
	
	define('less(str,sub)before,after')		:(less.end)

*	Less removes the first instance of each character in *sub* from *str*, 
*	where *sub* is a substring of *str*.

less
	ident(str)					:s(return)
	less = str
less.ch
	sub len(1) . ch =				:f(return)	
	less break(ch) . before  ch rem . after
	less = before after				:(less.ch)
less.end

	define('pack(chars)i')				:(pack.end)

*	Pack the array of characters *chars* into a line.

*PACK*
pack
pack.ch
	pack = pack chars[i = i + 1]			:f(return)s(pack.ch)
pack.end

	define('place(txt,rack)')			:(place.end)

*	Place the permutation digits in *txt* with the corresponding tiles from *rack*.

*PLACE
place
	place = replace(txt,substr('1234567',1,size(rack)),rack)
							:(return)
place.end


	define('prefix(str,pre)word')			:(prefix.end)
*PREFIX*
prefix

*	Prefix takes a list of space-separated words str and prefixes each
*	with the string pre.

	str = str ' ';* so each word followed by space
prefix.1
	str break(' ') . word span(' ')  =		:f(return)
	prefixcount = prefixcount + 1
	prefix = append(prefix, pre word,'A')		:(prefix.1)
prefix.end

	define('random(n)')				:(random.end)

*	Return integer uniformly distributed in 1,2,...,n. 
*	If n=0 returns real uniformly distributed in the interval [0,1].
*	The Algorithm is based on that in section 16.1 of "Algorithms in SNOBOL4,"
*	James F. Gimpel, John Wiley and Sons, 1976.

*RANDOM*
random	
	g.random_var = remdr(g.random_var * 4676, 414971)
*	random  = g.random_var / convert(414971,'float')
	random  = g.random_var / 414971.0
	random = ne(n) convert(random * n,'integer') + 1
							:(return)
random.end

	define('show(rack,player)')			:(show.end)

*	Show state of board, used and value grids before start of move.

*SHOW*
show
	output = 'rack for player ' player ': ' rack

							:(return)
show.end

	define('show.tiles(tiles)i')			:(show.tiles.end)

*	Show a list of tiles, separated by blanks.

*SHOW.TILES*
show.tiles
	gt(i = i + 1,size(tiles))			:s(return)
	show.tiles = append(show.tiles, ucase(substr(tiles,i,1))) :(show.tiles)
show.tiles.end
	define('shuffle()tiles,n,r1,r2,ch,sz')		:(shuffle.end)

*	Shuffle the remaining tiles by randomly swapping two tiles several times.

*SHUFFLE*
shuffle	
	sz = size(g.tiles)
	tiles = unpack(g.tiles)
	n = size(g.tiles)  * 2
	gsize = size(g.tiles)
	lt(n,5)						:s(shuffle.done)
shuffle.next
	le(n = n - 1)					:s(shuffle.done)
	r1 = random(n); r2 = random(n)
	r1 = gt(r1,sz) sz
	r1 = lt(r1,1) 1
	r2 = gt(r2,sz) sz
	r2 = lt(r2,1) 1
	eq(r1,r2)					:s(shuffle.next)
	output = lt(r1,1) 'shuffle r1<1 ' r1	:s(end)
	output = lt(r2,1) 'r2<1 ' r2	:s(end)
	output = gt(r1,gsize) 'r1 > gsize '  r1 ' ' gsize :s(end)
	output = gt(r2,gsize) ' r2 ne gsize ' r2 ' ' gsize :s(end)
	ch = tiles[r1]
	tiles[r1] = tiles[r2]	
	tiles[r2] = ch					:(shuffle.next)
shuffle.done
	g.tiles = pack(tiles)
							:(return)
shuffle.end

	define('spaces(line)n')				:(spaces.end)

*	Count number of spaces in line.

*SPACES*
spaces
	line len(1) . c =				:f(return)
	spaces = ident(c,' ') spaces + 1		:(spaces)
spaces.end


	define('subarray(ara,start,len)i')		:(subarray.end)

*	Like substr, but returns the sub-array of *ara* starting at element *start* and
*	consisting of *len* elements

*SUBARRAY*
subarray
	subarray = array(len)
subarray.1
	gt(i = i + 1,len)				:s(return)
	subarray[i] = copy(ara[start + i - 1])		:(subarray.1)		
subarray.end

	define('swap(tiles,n)')				:(swap.end)

*	Swap *n* files from the first *n* characters in *tiles*. If fewer than *n* tiles remain,
*	set *n* to the size of the tileset.

*SWAP*
swap	
	n = gt(n,size(tiles)) size(tiles)
	n = gt(n,size(g.tiles)) size(g.tiles)
	eq(n)						:s(freturn)
swap.next
	swap = substr(g.tiles,1,n)
	g.tiles = substr(g.tiles,n + 1)  substr(tiles,1,n)
							:(return)
swap.end

	define('take(n)')				:(take.end)

*	Take *n* tiles from the tileset, unless there are fewer than *n* tiles left,
*	in which case return the reamining tiles.

*TAKE*
take
	n = gt(n,size(g.tiles)) size(g.tiles)
	take = order(substr(g.tiles,1,n))
	g.tiles = substr(g.tiles, n + 1)
*	output = 'take<' take '> g.tiles<' g.tiles '>'
							:(return)
take.end

	define('tracer()')				:(tracer.end)

*	Initiate tracing at start of move *g.trace*.

*TRACER*
tracer
	output = 'TRACER tracer g.trace ' g.trace ' move now ' g.turn
	ident(g.trace)					:s(return)
	ne(g.turn,g.trace)				:s(return)
*	&ftrace = &trace = g.tracing = 1000000		
	g.tracing = 1
	output = 'start TRACING turn=' g.turn ' g.tracing=' g.tracing
							:(return)
tracer.end

	define('ucase(s)')				:(ucase.end)

*	Convert argument to upper case.

*UCASE*
ucase
	ucase = replace(s,&lcase,&ucase)		:(return)
ucase.end
	
	define('unpack(line),c,i')			:(unpack.end)

*	Unpack the characters of line *line* to an array of characters.

*UNPACK*
unpack
	unpack = array(size(line))
unpack.ch
	c = substr(line,i = i + 1,1)			:f(return)
	unpack[i] = c					:(unpack.ch)
unpack.end

	define('wordcount(s)i,w')			:(wordcount.end)

*	Return number of words in s, fail if no words

*WORDCOUNT*
wordcount
	s break(' ')					:f(freturn)
	
	wordcount = 0
wordcount.1
	s break(' ') . w span(' ') =			:f(return)
	wordcount = +wordcount + 1			:(wordcount.1)
wordcount.end

	define('words(s)n,w,pos,i')			:(words.end)

*	Return array of the words in s, fail if no words.
*	The first entry for an array is the starting index,
*	the second entry is the word itself.

*WORDS*
words
	n = wordcount(s)				:f(freturn)
	s = s ' '
	words = table(n)
	pos = 1	
	s span(' ') . w =				:f(words.1)
	pos = size(w) + 1;* point to start of first word
words.1
	s break(' ') . w ' ' = ' ' 			:f(words.done)
	words[pos] = w					
	i = i + 1	
	gt(i,n)						:s(words.done)
	
	pos = pos + size(w) + 1;* set to start of next word
							:(words.1)
words.done
	words = convert(words,'array')			:(return)
words.end
